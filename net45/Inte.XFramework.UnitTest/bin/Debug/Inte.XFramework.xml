<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inte.XFramework</name>
    </assembly>
    <members>
        <member name="T:Inte.XFramework.Caching.ExpirationCache`2">
            <summary>
            管理缓存过期行为的缓存器
            </summary>
        </member>
        <member name="T:Inte.XFramework.Caching.ExpirationCache`2.CacheItem">
            <summary>
            缓存项
            </summary>
        </member>
        <member name="P:Inte.XFramework.Caching.ExpirationCache`2.CacheItem.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Inte.XFramework.Caching.ExpirationCache`2.CacheItem.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Inte.XFramework.Caching.ExpirationCache`2.CacheItem.LastAccessTime">
            <summary>
            最后访问时间
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ExpirationCache`2.CacheItem.SetLastAccess">
            <summary>
            设置缓存项的最后访问时间
            </summary>
        </member>
        <member name="P:Inte.XFramework.Caching.ExpirationCache`2.Timeout">
            <summary>
            缓存过期时间，默认30分钟
            </summary>
        </member>
        <member name="P:Inte.XFramework.Caching.ExpirationCache`2.Period">
            <summary>
            添加缓存时间间隔，默认1秒钟
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ExpirationCache`2.#ctor">
            <summary>
            实例化 <see cref="!:ExpirationCache"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ExpirationCache`2.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            实例化 <see cref="!:ExpirationCache"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ExpirationCache`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan,System.TimeSpan)">
            <summary>
            实例化 <see cref="!:ExpirationCache"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ExpirationCache`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            尝试获取指定键值的缓存项，若缓存项不存在，则使用指定委托创建
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ExpirationCache`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1})">
            <summary>
            若指定的键值存在，则使用指定委托更新，否则使用指定委托创建
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ExpirationCache`2.TryGet(`0,`1@)">
            <summary>
            尝试获取指定键值的缓存项
            </summary>
        </member>
        <member name="T:Inte.XFramework.Caching.ICache`2">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="P:Inte.XFramework.Caching.ICache`2.Count">
            <summary>
            缓存项目计数
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ICache`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            尝试获取指定键值的缓存项，若缓存项不存在，则使用指定委托创建
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ICache`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1})">
            <summary>
            若指定的键值存在，则使用指定委托更新，否则使用指定委托创建
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ICache`2.TryGet(`0,`1@)">
            <summary>
            尝试获取指定键值的缓存项
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ICache`2.Remove(`0)">
            <summary>
            移除指定键值的缓存项
            </summary>
        </member>
        <member name="T:Inte.XFramework.Caching.MemberInfoComparer`1">
            <summary>
            成员比较器
            </summary>
        </member>
        <member name="P:Inte.XFramework.Caching.MemberInfoComparer`1.Default">
            <summary>
            默认实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.MemberInfoComparer`1.Compare(`0,`0)">
            <summary>
            比较两个对象并返回一个值，指示一个对象是小于、等于还是大于另一个对象。
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.MemberInfoComparer`1.Equals(`0,`0)">
            <summary>
             确定指定的对象是否相等。
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.MemberInfoComparer`1.GetHashCode(`0)">
            <summary>
            返回指定对象的哈希代码。
            </summary>
        </member>
        <member name="T:Inte.XFramework.Caching.ReaderWriterCache`2">
            <summary>
            可读写缓存器
            </summary>
        </member>
        <member name="P:Inte.XFramework.Caching.ReaderWriterCache`2.Cache">
            <summary>
            缓存内容
            </summary>
        </member>
        <member name="P:Inte.XFramework.Caching.ReaderWriterCache`2.Count">
            <summary>
            缓存项目计数
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ReaderWriterCache`2.#ctor">
            <summary>
            实例化 <see cref="!:ReaderWriterCache"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ReaderWriterCache`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            实例化 <see cref="!:ReaderWriterCache"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ReaderWriterCache`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            尝试获取指定键值的缓存项，若缓存项不存在，则使用指定委托创建
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ReaderWriterCache`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1})">
            <summary>
            若指定的键值存在，则使用指定委托更新，否则使用指定委托创建
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ReaderWriterCache`2.TryGet(`0,`1@)">
            <summary>
            尝试获取指定键值的缓存项
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ReaderWriterCache`2.Remove(`0)">
            <summary>
            移除指定键值的缓存项
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ReaderWriterCache`2.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.ReaderWriterCache`2.Dispose(System.Boolean)">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:Inte.XFramework.Caching.SimpleCache`2">
            <summary>
            简单键值对缓存器，键 一般为字符类型
            </summary>
        </member>
        <member name="P:Inte.XFramework.Caching.SimpleCache`2.Count">
            <summary>
            缓存项目计数
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.SimpleCache`2.#ctor">
            <summary>
            实例化 <see cref="!:SimpleCache"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.SimpleCache`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            尝试获取指定键值的缓存项，若缓存项不存在，则使用指定委托创建
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.SimpleCache`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1})">
            <summary>
            若指定的键值存在，则使用指定委托更新，否则使用指定委托创建
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.SimpleCache`2.TryGet(`0,`1@)">
            <summary>
            尝试获取指定键值的缓存项
            </summary>
        </member>
        <member name="M:Inte.XFramework.Caching.SimpleCache`2.Remove(`0)">
            <summary>
            移除指定键值的缓存项
            </summary>
        </member>
        <member name="T:Inte.XFramework.IPagedList">
            <summary>
            分页列表接口
            </summary>
        </member>
        <member name="P:Inte.XFramework.IPagedList.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:Inte.XFramework.IPagedList.PageSize">
            <summary>
            页长
            </summary>
        </member>
        <member name="P:Inte.XFramework.IPagedList.TotalCount">
            <summary>
            记录总数
            </summary>
        </member>
        <member name="P:Inte.XFramework.IPagedList.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Inte.XFramework.IPagedList.HasPreviousPage">
            <summary>
            能否进行上一次查询
            </summary>
        </member>
        <member name="P:Inte.XFramework.IPagedList.HasNextPage">
            <summary>
            能否进行下一页查询
            </summary>
        </member>
        <member name="T:Inte.XFramework.PagedList`1">
            <summary>
            分页数据列表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Inte.XFramework.PagedList`1.Items">
            <summary>
            数据项
            </summary>
        </member>
        <member name="P:Inte.XFramework.PagedList`1.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Inte.XFramework.PagedList`1.TotalCount">
            <summary>
            记录总数
            </summary>
        </member>
        <member name="P:Inte.XFramework.PagedList`1.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:Inte.XFramework.PagedList`1.PageSize">
            <summary>
            页长
            </summary>
        </member>
        <member name="P:Inte.XFramework.PagedList`1.HasPreviousPage">
            <summary>
            是否有上一页
            </summary>
        </member>
        <member name="P:Inte.XFramework.PagedList`1.HasNextPage">
            <summary>
            是否有下一页
            </summary>
        </member>
        <member name="P:Inte.XFramework.PagedList`1.Count">
            <summary>
            当前页记录数
            </summary>
        </member>
        <member name="P:Inte.XFramework.PagedList`1.Item(System.Int32)">
            <summary>
            获取或设置位于指定索引处的元素
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.PagedList`1.#ctor">
            <summary>
            初始化<see cref="!:PagedList"/>类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.PagedList`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化<see cref="!:PagedList"/>类的新实例
            </summary>
        </member>
        <member name="T:Inte.XFramework.ConvertHelper">
            <summary>
            类型转换帮助类
            </summary>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ConvertBase(System.String,System.Int32,System.Int32)">
            <summary>
            实现各进制数间的转换。ConvertBase("15",10,16)表示将十进制数15转换为16进制的数。
            </summary>
            <param name="value">要转换的值,即原值</param>
            <param name="from">原值的进制,只能是2,8,10,16四个值。</param>
            <param name="to">要转换到的目标进制，只能是2,8,10,16四个值。</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.IsBaseNumber(System.Int32)">
            <summary>
            判断是否是  2 8 10 16
            </summary>
            <param name="baseNumber"></param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.StringToBytes(System.String)">
            <summary>
            将string转换成byte[]
            </summary>
            <param name="text">要转换的字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.StringToBytes(System.String,System.Text.Encoding)">
            <summary>
            使用指定字符集将string转换成byte[]
            </summary>
            <param name="text">要转换的字符串</param>
            <param name="encoding">字符编码</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.BytesToString(System.Byte[])">
            <summary>
            将byte[]转换成string
            </summary>
            <param name="bytes">要转换的字节数组</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.BytesToString(System.Byte[],System.Text.Encoding)">
            <summary>
            使用指定字符集将byte[]转换成string
            </summary>
            <param name="bytes">要转换的字节数组</param>
            <param name="encoding">字符编码</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.BytesToInt32(System.Byte[])">
            <summary>
            将byte[]转换成int
            </summary>
            <param name="data">需要转换成整数的byte数组</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToInt32``1(``0,System.Int32)">
            <summary>
            将数据转换为整型   转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToInt32(System.String,System.Int32)">
            <summary>
            将数据转换为整型   转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToInt32(System.Object,System.Int32)">
            <summary>
            将数据转换为整型  转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToBoolean``1(``0,System.Boolean)">
            <summary>
            将数据转换为布尔类型  转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToBoolean(System.String,System.Boolean)">
            <summary>
            将数据转换为布尔类型  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToBoolean(System.Object,System.Boolean)">
            <summary>
            将数据转换为布尔类型  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToFloat``1(``0,System.Single)">
            <summary>
            将数据转换为单精度浮点型  转换失败 返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToFloat(System.Object,System.Single)">
            <summary>
            将数据转换为单精度浮点型   转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToFloat(System.String,System.Single)">
            <summary>
            将数据转换为单精度浮点型   转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToDouble``1(``0,System.Double)">
            <summary>
            将数据转换为双精度浮点型   转换失败返回默认值
            </summary>
            <typeparam name="T">数据的类型</typeparam>
            <param name="data">要转换的数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToDouble``1(``0,System.Int32,System.Double)">
            <summary>
            将数据转换为双精度浮点型,并设置小数位   转换失败返回默认值
            </summary>
            <typeparam name="T">数据的类型</typeparam>
            <param name="data">要转换的数据</param>
            <param name="decimals">小数的位数</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToDouble(System.Object,System.Double)">
            <summary>
            将数据转换为双精度浮点型  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToDouble(System.String,System.Double)">
            <summary>
            将数据转换为双精度浮点型  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToDouble(System.Object,System.Int32,System.Double)">
            <summary>
            将数据转换为双精度浮点型,并设置小数位  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="decimals">小数的位数</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToDouble(System.String,System.Int32,System.Double)">
            <summary>
            将数据转换为双精度浮点型,并设置小数位  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="decimals">小数的位数</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ConvertTo(System.Object,System.Type)">
            <summary>
            将数据转换为指定类型
            </summary>
            <param name="data">转换的数据</param>
            <param name="targetType">转换的目标类型</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ConvertTo``1(System.Object)">
            <summary>
            将数据转换为指定类型
            </summary>
            <typeparam name="T">转换的目标类型</typeparam>
            <param name="data">转换的数据</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToDecimal``1(``0,System.Decimal)">
            <summary>
            将数据转换为Decimal  转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToDecimal(System.Object,System.Decimal)">
            <summary>
            将数据转换为Decimal  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToDecimal(System.String,System.Decimal)">
            <summary>
            将数据转换为Decimal  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToDateTime``1(``0,System.DateTime)">
            <summary>
            将数据转换为DateTime  转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将数据转换为DateTime  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ToDateTime(System.String,System.DateTime)">
            <summary>
            将数据转换为DateTime  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ConvertToSBC(System.String)">
             <summary>
             转全角的函数(SBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
             <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
             </remarks>
        </member>
        <member name="M:Inte.XFramework.ConvertHelper.ConvertToDBC(System.String)">
             <summary> 转半角的函数(DBC case) </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
             <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
             </remarks>
        </member>
        <member name="T:Inte.XFramework.PhoneticizeHelper">
            <summary>
            中文拼音操作类
            </summary>
        </member>
        <member name="F:Inte.XFramework.PhoneticizeHelper._phoneticizeValues">
            <SUMMARY>
            包含字符 ASC 码的整形数组。
            </SUMMARY>
        </member>
        <member name="F:Inte.XFramework.PhoneticizeHelper._phoneticizeNames">
            <SUMMARY>
            包含汉字拼音的字符串数组。
            </SUMMARY>
        </member>
        <member name="M:Inte.XFramework.PhoneticizeHelper.CHSToPhoneticize(System.String,System.String,System.Boolean)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="separator">连接拼音之间的分隔符</param>
            <param name="initialCap">指定是否将首字母大写</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:Inte.XFramework.PhoneticizeHelper.CHSToPhoneticize(System.String,System.String)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="separator">连接拼音之间的分隔符</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:Inte.XFramework.PhoneticizeHelper.CHSToPhoneticize(System.String,System.Boolean)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="initialCap">指定是否将首字母大写</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:Inte.XFramework.PhoneticizeHelper.CHSToPinyin(System.String)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:Inte.XFramework.PhoneticizeHelper.GetFirstPhoneticize(System.String)">
            <summary>
            提取首字母。兼容中英文
            </summary>
            <param name="chsStr">单个汉字或字母</param>
            <returns>返回值</returns>
        </member>
        <member name="P:Inte.XFramework.PhoneticizeHelper.CHSPhraseSpecial">
            <summary>
            设置或获取包含例外词组读音的键/值对的组合
            </summary>
        </member>
        <member name="T:Inte.XFramework.XmlHelper">
            <summary>
            XML 文件操作类
            </summary>
        </member>
        <member name="M:Inte.XFramework.XmlHelper.Read(System.String,System.String,System.String)">
            <summary>
            读取数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时返回该属性值，否则返回串联值</param>
            <returns>string</returns>
        </member>
        <member name="M:Inte.XFramework.XmlHelper.Insert(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="element">元素名，非空时插入新元素，否则在该元素中插入属性</param>
            <param name="attribute">属性名，非空时插入该元素属性值，否则插入元素值</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.XmlHelper.Update(System.String,System.String,System.String,System.String)">
            <summary>
            修改数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时修改该节点属性值，否则修改节点值</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.XmlHelper.Delete(System.String,System.String,System.String)">
            <summary>
            删除数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时删除该节点属性值，否则删除节点值</param>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.MetadataTypesRegister">
            <summary>
            类型元数据注册器
            </summary>
        </member>
        <member name="M:Inte.XFramework.MetadataTypesRegister.Register(System.Reflection.Assembly)">
            <summary>
            注册类型元数据说明
            </summary>
        </member>
        <member name="T:Inte.XFramework.XValidator">
            <summary>
            定义一个帮助器类，在与对象、属性和方法关联的特性中包含此类时，可使用此类来验证这些项
            </summary>
        </member>
        <member name="M:Inte.XFramework.XValidator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean,System.Boolean)">
            <summary>
            通过使用验证上下文、验证结果集合和用于指定是否验证所有属性的值，确定指定的对象是否有效。
            </summary>
            <param name="instance">要验证的对象</param>
            <param name="validationContext">用于描述要验证的对象的上下文</param>
            <param name="validationResults">用于包含每个失败的验证的集合</param>
            <param name="validateAllProperties">若要验证所有属性</param>
            <param name="breakOnFirstError">当第一个错误产生时，是否不再进行后续验证</param>
            <returns></returns>
        </member>
        <member name="P:Inte.XFramework.XfwCommon.ConnString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="F:Inte.XFramework.XfwCommon.AuthScheme">
            <summary>
            验证方式
            </summary>
        </member>
        <member name="F:Inte.XFramework.XfwCommon.MinDateTime">
            <summary>
            系统最小时间
            </summary>
        </member>
        <member name="F:Inte.XFramework.XfwCommon.DateFormat">
            <summary>
            日期格式
            </summary>
        </member>
        <member name="F:Inte.XFramework.XfwCommon.TimeFormat">
            <summary>
            时间格式
            </summary>
        </member>
        <member name="F:Inte.XFramework.XfwCommon.LongTimeFormat">
            <summary>
            长时间格式
            </summary>
        </member>
        <member name="F:Inte.XFramework.XfwCommon.MoneyFormat">
            <summary>
            金额格式
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwCommon.GetAppSetting(System.String)">
            <summary>
            获取 App Setting 节的配置信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.XfwCommon.ConvertToDateTime(System.String)">
            <summary>
            将时间戳(以秒为单位)转成时间
            </summary>
            <param name="sec">是已秒做单位的时间戳</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.XfwCommon.ConvertToDateTime(System.Int64)">
            <summary>
            将时间戳(以刻度数为单位)转成时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.XfwCommon.ConvertToLong(System.DateTime)">
            <summary>
            日期转 long 型(以刻度数为单位)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.XfwCommon.ConvertToLong(System.String)">
            <summary>
            日期转long型(以秒为单位)
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwCommon.GenerateRandom(System.Int32)">
            <summary>
            生成0-9, a-b,A-B 之间指定的数量的随机数
            </summary>
            <param name="length">指定返回多少个数.</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SecurityHelper.DESDecrypt(System.String)">
            <summary>
            DES解密
            </summary>
            <param name="str">要解密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SecurityHelper.DESDecrypt(System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="str">要加密的字符串，用 Base64 数字编码的等效字符串表示形式。</param>
            <param name="key">密钥，且必须为8位。</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SecurityHelper.DESEncrypt(System.String)">
            <summary>
            DES加密字符串，用 Base64 数字编码的等效字符串表示形式
            </summary>
            <param name="str">要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SecurityHelper.DESEncrypt(System.String,System.String)">
            <summary>
            DES加密字符串，用 Base64 数字编码的等效字符串表示形式
            </summary>
            <param name="str">要加密的字符串。</param>
            <param name="key">密钥，且必须为8位。</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SecurityHelper.ConvertToHexMD5(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            转为 16 进制表示的 md5加密的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.SerializeHelper">
            <summary>
            序列化助手类
            </summary>
        </member>
        <member name="M:Inte.XFramework.SerializeHelper.SerializeToJson(System.Object,System.String)">
            <summary>
            对象序列化成Json字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SerializeHelper.DeserializeFromJson``1(System.String)">
            <summary>
            Json字符串反序列化成对象
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="strJson">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SerializeHelper.SerializeToXml``1(``0)">
            <summary>
            对象序列化成 XML 字符串
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="obj">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SerializeHelper.SerializeToXml``1(``0,System.Xml.Serialization.XmlRootAttribute)">
            <summary>
            对象序列化成 XML 字符串
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="obj">要序列化的对象</param>
            <param name="root">指定根对象的名称</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SerializeHelper.SerializeToXml``1(``0,System.Xml.Serialization.XmlRootAttribute,System.String)">
            <summary>
            对象序列化成 XML 字符串
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="obj">要序列化的对象</param>
            <param name="root">指定根对象的名称</param>
            <param name="defaultNamespace">xml命名空间</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SerializeHelper.SerializeToXml``1(System.Xml.Serialization.XmlSerializer,``0)">
            <summary>
            对象序列化成 XML 字符串
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="serializer">序列化器</param>
            <param name="obj">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SerializeHelper.DeserializeFromXml``1(System.String)">
            <summary>
            XML 字符串 反序列化成对象
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="xml">xml内容</param>
            <param name="root">指定根对象的名称</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SerializeHelper.DeserializeFromXml``1(System.String,System.Xml.Serialization.XmlRootAttribute)">
            <summary>
            XML 字符串 反序列化成对象
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="xml">xml内容</param>
            <param name="root">指定根对象的名称</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SerializeHelper.DeserializeFromXml``1(System.String,System.Xml.Serialization.XmlRootAttribute,System.String)">
            <summary>
            XML 字符串 反序列化成对象
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="xml">xml内容</param>
            <param name="root">指定根对象的名称</param>
            <param name="defaultNamespace">xml命名空间</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.SerializeHelper.DeserializeFromXml``1(System.Xml.Serialization.XmlSerializer,System.String)">
            <summary>
            XML 字符串 反序列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">序列化器</param>
            <param name="xml">xml内容</param>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.WebHelper">
            <summary>
            WEB助手类
            </summary>
        </member>
        <member name="M:Inte.XFramework.WebHelper.SetCookie(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            设置Cookie
            </summary>
            <param name="key">cookie键</param>
            <param name="value">cookie值</param>
            <param name="expires">过期时间，分钟为单位，默认一天</param>
            <param name="encrypt">是否加密cookie</param>
        </member>
        <member name="M:Inte.XFramework.WebHelper.SetCookie(System.String,System.String,System.DateTime,System.Boolean)">
            <summary>
            设置Cookie
            </summary>
            <param name="key">cookie键</param>
            <param name="value">cookie值</param>
            <param name="expires">过期时间，分钟为单位，默认一天</param>
            <param name="encrypt">是否加密cookie</param>
        </member>
        <member name="M:Inte.XFramework.WebHelper.SetCookie``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            设置COOKIE
            </summary>
            <param name="key">cookie键</param>
            <param name="TCookie">cookie值</param>
            <param name="expires">过期时间，分钟为单位，默认一天</param>
            <param name="encrypt">是否加密cookie</param>
        </member>
        <member name="M:Inte.XFramework.WebHelper.SetCookie``1(System.String,``0,System.DateTime,System.Boolean)">
            <summary>
            设置COOKIE
            </summary>
            <param name="key">cookie键</param>
            <param name="TCookie">cookie值</param>
            <param name="expires">过期时间，分钟为单位，默认一天</param>
            <param name="encrypt">是否加密cookie</param>
        </member>
        <member name="M:Inte.XFramework.WebHelper.GetCookie``1(System.String,System.Boolean)">
            <summary>
            取指定KEY值的Cookie
            </summary>
        </member>
        <member name="M:Inte.XFramework.WebHelper.GetCookie(System.String,System.Boolean)">
            <summary>
            取指定KEY值的Cookie
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.WebHelper.RemoveCookie(System.String)">
            <summary>
            删除COOKIE
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Inte.XFramework.WebHelper.SetAuthentication(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            写登录Cookie
            </summary>
            <param name="ticketName">ticket名称</param>
            <param name="userData">存储在票证中的用户特定的数据。</param>
            <param name="expiration">过期时间（单位：分钟）</param>
        </member>
        <member name="M:Inte.XFramework.WebHelper.GetAuthenCookie(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            取登录
            </summary>
            <param name="cookieName">cookie名称</param>
            <param name="userData">存储在票证中的用户特定的数据。</param>
            <param name="expiration">过期时间（单位：分钟）</param>
        </member>
        <member name="M:Inte.XFramework.WebHelper.ClearAuthentication(System.Boolean,System.String)">
            <summary>
            清除验证COOKIE
            </summary>
            <param name="redirect">清除验证cookie后是否应该重定向</param>
            <param name="url">重定向地址</param>
        </member>
        <member name="M:Inte.XFramework.WebHelper.DownloadFile(System.String,System.Boolean,System.Int64,System.Boolean)">
            <summary>
            下载文件
            </summary>
            <param name="webPath">相对路径</param>
            <param name="limitSpeed">是否限制客户端的下载速度</param>
            <param name="speed">客户端下载速度（B/MS）</param>
            <param name="delete">下载完成后是否删除文件</param>
        </member>
        <member name="M:Inte.XFramework.WebHelper.ToHex(System.String)">
            <summary>
            将非ASCII字符进行编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.WebHelper.ToHex(System.Char)">
            <summary>
            将一个非ASCII字符进行编码
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.WebHelper.NeedEncode(System.Char)">
            <summary>
            检测字符是否需要编码
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.WebHelper.CreateThumbnail(System.String,System.Int32,System.Int32)">
            <summary>
            生成缩略图，并把缩略图缩放到指定的大小，缩放要求不变形、不裁剪
            </summary>
            <param name="fileName">图片文件完全路径</param>
            <param name="destWidth">目标宽度</param>
            <param name="destHeight">目标高度</param>
        </member>
        <member name="M:Inte.XFramework.WebHelper.CreateThumbnail(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            生成缩略图，并把缩略图缩放到指定的大小，缩放要求不变形、不裁剪
            </summary>
            <param name="srcImage">来源图片</param>
            <param name="destWidth">目标宽度</param>
            <param name="destHeight">目标高度</param>
        </member>
        <member name="M:Inte.XFramework.WebHelper.CreateValidateGraphic(System.String@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            生成图形验证码
            </summary>
            <param name="code">输出验证码内容</param>
            <param name="length">验证码长度</param>
            <param name="width">图片宽度</param>
            <param name="height">图片长度</param>
            <param name="fontSize">字体大小</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.WebHelper.PostAsync``1(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
            HttpClient 用POST方法访问指定URI
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uri">请求发送到的 URI。</param>
            <param name="content">发送到服务器的 HTTP 请求内容。</param>
            <param name="headers">请求的头部信息</param>
            <param name="authentication">请求的验证信息</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.WebHelper.GetAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
            HttpClient 用GET方法访问指定URI
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uri">请求发送到的 URI。</param>
            <param name="headers">请求的头部信息</param>
            <param name="authentication">请求的验证信息</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.WebHelper.GetAsync``1(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            HttpClient 用GET方法访问指定URI
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uri">请求发送到的 URI。</param>
            <param name="token">Basic 验证模式的令牌</param>
            <param name="headers">请求的头部信息</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.WebHelper.GetAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            HttpClient 用GET方法访问指定URI <c>用完注意调用HttpContent.Dispose方法</c>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uri">请求发送到的 URI。</param>
            <param name="token">Basic 验证模式的令牌</param>
            <param name="headers">请求的头部信息</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.WebHelper.HttpPost``1(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Nullable{System.Int32})">
            <summary>
            HttpWebRequest 用POST方法访问指定URI
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uri">请求发送到的 URI。</param>
            <param name="content">POST内容</param>
            <param name="headers">请求的头部信息</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.WebHelper.HttpGet``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            HttpWebRequest 用GET方法访问指定URI
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uri">请求发送到的 URI。</param>
            <param name="headers">请求的头部信息</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.WebHelper.HttpGet(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            HttpWebRequest 用GET方法访问指定URI<c>使用完记得调用Stream.Close方法</c>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uri">请求发送到的 URI。</param>
            <param name="headers">请求的头部信息</param>
            <param name="contentType">请求的验证信息</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.WebHelper.HttpPost(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Nullable{System.Int32},System.Text.Encoding)">
            <summary>
            HttpWebRequest 用POST方法访问指定URI<c>使用完记得调用Stream.Close方法</c>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uri">请求发送到的 URI。</param>
            <param name="content">POST内容</param>
            <param name="headers">请求的头部信息</param>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.XfwContainer">
            <summary>
            默认 Ioc 容器
            </summary>
        </member>
        <member name="T:Inte.XFramework.XfwContainer.Activator">
            <summary>
            注册器
            </summary>
        </member>
        <member name="P:Inte.XFramework.XfwContainer.Activator.Instance">
            <summary>
            单例
            </summary>
        </member>
        <member name="P:Inte.XFramework.XfwContainer.Activator.Func">
            <summary>
            非单例
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwContainer.Register``1(System.Func{``0})">
            <summary>
            向容器注册单例实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwContainer.Register``1(System.Func{``0},System.Boolean)">
            <summary>
            向容器注册类型
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwContainer.Register(System.Type,System.Func{System.Object},System.Boolean)">
            <summary>
            向容器注册类型
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwContainer.Resolve``1">
            <summary>
            从容器中解析指定类型
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwContainer.IsRegistered``1">
            <summary>
            返回指定类型是否已经在容器中
            </summary>
        </member>
        <member name="M:Inte.XFramework.IContainer.Register``1(System.Func{``0})">
            <summary>
            向容器注册类型
            </summary>
        </member>
        <member name="M:Inte.XFramework.IContainer.Register``1(System.Func{``0},System.Boolean)">
            <summary>
            向容器注册类型
            </summary>
        </member>
        <member name="M:Inte.XFramework.IContainer.Register(System.Type,System.Func{System.Object},System.Boolean)">
            <summary>
            向容器注册类型
            </summary>
        </member>
        <member name="M:Inte.XFramework.IContainer.Resolve``1">
            <summary>
            从窗口中解析指定类型
            </summary>
        </member>
        <member name="T:Inte.XFramework.Mailer">
            <summary>
            Mailer 发送Email的类
            </summary>
        </member>
        <member name="P:Inte.XFramework.Mailer.To">
            <summary>
            收件人地址,可以是以;或,分隔的mail地址
            标准的方式是以,(逗号)分隔
            </summary>
        </member>
        <member name="P:Inte.XFramework.Mailer.CC">
            <summary>
            收件人地址,可以是以;或,分隔的mail地址
            标准的方式是以,(逗号)分隔
            </summary>
        </member>
        <member name="P:Inte.XFramework.Mailer.Subject">
            <summary>
            邮件主题
            </summary>
        </member>
        <member name="P:Inte.XFramework.Mailer.Content">
            <summary>
            邮件内容
            </summary>
        </member>
        <member name="P:Inte.XFramework.Mailer.From">
            <summary>
            发件人地址
            </summary>
        </member>
        <member name="P:Inte.XFramework.Mailer.DisplayName">
            <summary>
            发件人显示的名称
            </summary>
        </member>
        <member name="P:Inte.XFramework.Mailer.SmtpServer">
            <summary>
            邮件发送服务器地址或dns
            </summary>
        </member>
        <member name="P:Inte.XFramework.Mailer.Port">
            <summary>
            服务器端口
            </summary>
        </member>
        <member name="P:Inte.XFramework.Mailer.Password">
            <summary>
            发件箱密码,可以为空
            </summary>
        </member>
        <member name="P:Inte.XFramework.Mailer.IsBodyHtml">
            <summary>
            邮件内容是否以html的形式, 默认为false
            </summary>
        </member>
        <member name="P:Inte.XFramework.Mailer.Attachments">
            <summary>
            文本附件路径,多个附件路径用分号分隔开
            </summary>
        </member>
        <member name="P:Inte.XFramework.Mailer.Priority">
            <summary>
            邮件的级别,默认为正常Normal
            </summary>
        </member>
        <member name="M:Inte.XFramework.Mailer.#ctor">
            <summary>
            Mailer 构造函数
            </summary>
        </member>
        <member name="M:Inte.XFramework.Mailer.SendMail">
            <summary>
            发smtp邮件
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwExtensions.True``1">
            <summary>
            返回真表达式
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwExtensions.False``1">
            <summary>
            返回假表达式
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwExtensions.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            拼接真表达式
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwExtensions.OrElse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            拼接假表达式
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwExtensions.ReduceUnary(System.Linq.Expressions.Expression)">
            <summary>
            reduce unaryExpression
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.XfwExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            取指定列表中符合条件的元素索引
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwExtensions.ToList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            创建一个集合
            </summary>
        </member>
        <member name="T:Inte.XFramework.XfwException">
            <summary>
            XFramework 类库异常
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwException.Check.NotNull``1(``0,System.String)">
            <summary>
            检查参数是否为空
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwException.Check.NotNull``1(System.Nullable{``0},System.String)">
            <summary>
            检查参数是否为空
            </summary>
        </member>
        <member name="M:Inte.XFramework.XfwException.Check.NotNull(System.String,System.String)">
            <summary>
            检查参数是否为空
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.BulkInfo">
            <summary>
            批量插入信息
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.BulkInfo.OnlyValue">
            <summary>
            标志在解析SQL时，是否仅解析 VALUE
            此属性主要用于批量插入数据
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.BulkInfo.IsOver">
            <summary>
            标志在解析批量插入时是否是结束位
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.DataContext">
            <summary>
            数据上下文，表示 Xfw 框架的主入口点
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DataContext.Provider">
            <summary>
            <see cref="T:Inte.XFramework.Data.IDbQueryable"/> 的解析执行提供程序
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DataContext.CommandTimeout">
            <summary>
            执行命令超时时间
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.#ctor">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.DataContext"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.#ctor(Inte.XFramework.Data.IDbQueryProvider)">
            <summary>
            使用提供程序初始化 <see cref="T:Inte.XFramework.Data.DataContext"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.Insert``1(``0)">
            <summary>
            新增记录
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量新增记录
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.Insert``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
            批量新增记录
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.Delete``1(``0)">
            <summary>
            删除记录
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            删除记录
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.Delete``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
            删除记录
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.Update``1(``0)">
            <summary>
            更新记录
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.Update``1(System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            更新记录
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.Update``1(System.Linq.Expressions.Expression{System.Func{``0,``0}},Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
            更新记录
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.Update``2(System.Linq.Expressions.Expression{System.Func{``0,``1,``0}},Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
            更新记录
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.SubmitChangesAsync">
            <summary>
            计算要插入、更新或删除的已修改对象的集，并执行相应命令以实现对数据库的更改
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.SubmitChanges">
            <summary>
            计算要插入、更新或删除的已修改对象的集，并执行相应命令以实现对数据库的更改
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.ExecuteNonQuery(System.Data.IDbTransaction)">
            <summary>
            返回影响的行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.DiscardChanges">
            <summary>
            释放所有的更改
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.GetTable``1">
            <summary>
            返回特定类型的对象的集合，其中类型由 T 参数定义
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.Dispose">
            <summary>
            释放由 <see cref="T:Inte.XFramework.Data.DataContext"/> 类的当前实例占用的所有资源
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataContext.Resolve(System.Boolean)">
            <summary>
            将 IDbQueryable&lt;T&gt;对象解析成 SQL 脚本
            </summary>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.Data.DbExpression">
            <summary>
            数据查询表达式
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbExpression.DbExpressionType">
            <summary>
            查询类型
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbExpression.Expressions">
            <summary>
            表达式
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbExpression.#ctor">
            <summary>
            实例化<see cref="T:Inte.XFramework.Data.DbExpression"/>类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbExpression.#ctor(Inte.XFramework.Data.DbExpressionType,System.Linq.Expressions.Expression)">
            <summary>
            实例化<see cref="T:Inte.XFramework.Data.DbExpression"/>类的新实例
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.DbExpressionType">
            <summary>
            表达式类型
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.DbQueryable`1">
            <summary>
            数据查询
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryable`1.Provider">
            <summary>
            数据查询提供者
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryable`1.DbExpressions">
            <summary>
            查询表达式
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryable`1.DbQueryInfo">
            <summary>
            转换后的查询对象
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryable`1.Bulk">
            <summary>
            批量插入信息
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryable`1.CreateQuery``1(Inte.XFramework.Data.DbExpressionType,System.Linq.Expressions.Expression)">
            <summary>
            创建查询
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryable`1.CreateQuery``1(Inte.XFramework.Data.DbExpression)">
            <summary>
            创建查询
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.DbQueryableInfo`1">
            <summary>
            提供对数据类型未知的特定数据源进行增/删/改查的语义表示
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.DbQueryableInfo_Delete`1">
            <summary>
            提供对数据类型未知的特定数据源进行 &lt;删&gt; 操作的语义表示
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Delete`1.Entity">
            <summary>
            实体对象
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Delete`1.SelectInfo">
            <summary>
            删除数据范围，支持 WHERE 和 JOIN 数据源
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.DbQueryableInfo_Insert`1">
            <summary>
            提供对数据类型未知的特定数据源进行 &lt;增&gt; 操作的语义表示
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableInfo_Insert`1.#ctor">
            <summary>
            初始化 <see cref="!:DbQueryableInfo_Insert"/> 类的新实例
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Insert`1.SelectInfo">
            <summary>
            SELECT 对象
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Insert`1.Entity">
            <summary>
            实体对象
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Insert`1.AutoIncrement">
            <summary>
            自增列
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Insert`1.Bulk">
            <summary>
            批量插入信息
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.DbQueryableInfo_Select`1">
            <summary>
            提供对数据类型未知的特定数据源进行 &lt;查&gt; 操作的语义表示
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.Join">
            <summary>
            JOIN 表达式集合
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.OrderBy">
            <summary>
            ORDER BY 表达式集合
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.GroupBy">
            <summary>
            GROUP BY 表达式集合
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.HaveDistinct">
            <summary>
            SQL 命令是否含 DISTINCT 
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.HaveAny">
            <summary>
            表达式是否是 Any 表达式
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.Skip">
            <summary>
            跳过序列中指定数量的元素
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.Take">
            <summary>
            从序列的开头返回指定数量的连续元素
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.FromType">
            <summary>
            指示 SELECT FROM 子句表对应类型
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.Expression">
            <summary>
            SELECT 字段表达式，空表示选取 <see cref="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.FromType"/> 的所有字段
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.Where">
            <summary>
            WHERE 表达式
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.Having">
            <summary>
            HAVING 表达式
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.Statis">
            <summary>
            统计函数表达式，包括如：COUNT,MAX,MIN,AVG,SUM
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.Subquery">
            <summary>
            子查询语义
            注意，T 可能不是 参数T 所表示的类型
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.Union">
            <summary>
            并集
            注意，T 可能不是 参数T 所表示的类型
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Select`1.AliasExpressions">
            <summary>
            参与表别名运算的表达式集
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableInfo_Select`1.#ctor">
            <summary>
            初始化 <see cref="!:DbQueryableInfo_Select"/> 类的新实例
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.DbQueryableInfo_Update`1">
            <summary>
            提供对数据类型未知的特定数据源进行 &lt;改&gt; 操作的语义表示
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Update`1.Entity">
            <summary>
            实体对象
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Update`1.Expression">
            <summary>
            更新指定字段表达式
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryableInfo_Update`1.SelectInfo">
            <summary>
            更新数据范围，支持 WHERE 和 JOIN 数据源
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.DbQueryProviderBase">
            <summary>
            数据查询提供者 提供一系列方法用以执行数据库操作
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.DbQueryProviderBase.XLoadAdapter">
            <summary>
            数据适配器，扩展Fill方法
            .NET的DataSet.Load方法，底层调用DataAdapter.Fill(DataTable[], IDataReader, int, int)
            Dapper想要返回DataSet，需要重写Load方法，不必传入DataTable[]，因为数组长度不确定
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.DbQueryProviderBase.XDataSet">
            <summary>
            扩展Load方法
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryProviderBase.MethodVisitor">
            <summary>
            方法表达式访问器
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryProviderBase.EscCharLeft">
            <summary>
            数据库安全字符 左
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryProviderBase.EscCharRight">
            <summary>
            数据库安全字符 右
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryProviderBase.DbProvider">
            <summary>
            数据源类提供者
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryProviderBase.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryProviderBase.ProviderName">
            <summary>
            数据查询提供者 名称
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryProviderBase.ParameterPrefix">
            <summary>
            命令参数前缀
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryProviderBase.CommandTimeout">
            <summary>
            执行命令超时时间
            </summary>
        </member>
        <member name="E:Inte.XFramework.Data.DbQueryProviderBase.OnException">
            <summary>
            异常事件
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.#ctor(System.Data.Common.DbProviderFactory,System.String)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.DbQueryProviderBase"/> 类的新实例
            </summary>
            <param name="providerFactory">数据源提供者</param>
            <param name="connectionString">数据库连接字符串</param>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.CreateConnection(System.Boolean)">
            <summary>
            创建数据库连接
            </summary>
            <param name="isOpen">是否打开连接</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.CreateConnectionAsync(System.Boolean)">
            <summary>
            异步创建数据库连接
            </summary>
            <param name="isOpen">是否打开连接</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.Parse``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
            创建 SQL 命令
            </summary>
            <param name="query">查询 语句</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.CreateCommand(System.String,System.Data.IDbTransaction,System.Nullable{System.Data.CommandType},System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            创建 SQL 命令
            </summary>
            <param name="commandText">SQL 语句</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.CreateParameter">
            <summary>
            创建命令参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.CreateParameter(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Int32},System.Nullable{System.Data.ParameterDirection})">
            <summary>
            创建命令参数
            </summary>
            <param name="parameterName">存储过程名称</param>
            <param name="value">参数值</param>
            <param name="dbType">参数类型</param>
            <param name="size">参数大小</param>
            <param name="direction">参数方向</param>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteNonQuery(System.String,System.Data.IDbTransaction)">
            <summary>
            执行 SQL 语句，并返回受影响的行数
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            执行 SQL 语句，并返回受影响的行数
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteNonQueryAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            异步执行 SQL 语句，并返回受影响的行数
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteNonQueryAsync(System.Data.IDbCommand)">
            <summary>
            异步执行 SQL 语句，并返回受影响的行数
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteScalar(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            执行SQL 语句，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteScalarAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteScalarAsync(System.Data.IDbCommand)">
            <summary>
            异步执行SQL 语句，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteReader(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.IDataReader"/> 对象
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteReader(System.Data.IDbCommand)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.IDataReader"/> 对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteReaderAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回 <see cref="T:System.Data.IDataReader"/> 对象
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteReaderAsync(System.Data.IDbCommand)">
            <summary>
            异步执行SQL 语句，并返回 <see cref="T:System.Data.IDataReader"/> 对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.Execute``1(Inte.XFramework.Data.IDbQueryable{``0},System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回单个实体对象
            </summary>
            <param name="query">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.Execute``1(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回单个实体对象
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.Execute``1(System.Data.IDbCommand,Inte.XFramework.Data.CommandDefine)">
            <summary>
            执行SQL 语句，并返回单个实体对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="define">命令定义对象，用于解析实体的外键</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteAsync``1(Inte.XFramework.Data.IDbQueryable{``0},System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回单个实体对象
            </summary>
            <param name="query">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteAsync``1(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回单个实体对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteAsync``1(System.Data.IDbCommand,Inte.XFramework.Data.CommandDefine)">
            <summary>
            执行SQL 语句，并返回单个实体对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.Execute(System.Collections.Generic.List{System.String},System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回新增记录时的自增ID列表
            <code> 批量 增/删/改 时用 </code>
            </summary>
            <param name="sqlList">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteAsync(System.Collections.Generic.List{System.String},System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回新增记录时的自增ID列表
            <code> 批量 增/删/改 时用 </code>
            </summary>
            <param name="sqlList">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteMultiple``2(Inte.XFramework.Data.IDbQueryable{``0},Inte.XFramework.Data.IDbQueryable{``1},System.Data.IDbTransaction)">
            <summary>
            执行 SQL 语句，并返回两个实体集合
            </summary>
            <param name="query1">SQL 命令</param>
            <param name="query2">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteMultipleAsync``2(Inte.XFramework.Data.IDbQueryable{``0},Inte.XFramework.Data.IDbQueryable{``1},System.Data.IDbTransaction)">
            <summary>
            异步执行 SQL 语句，并返回两个实体集合
            </summary>
            <param name="query1">SQL 命令</param>
            <param name="query2">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteMultiple``3(Inte.XFramework.Data.IDbQueryable{``0},Inte.XFramework.Data.IDbQueryable{``1},Inte.XFramework.Data.IDbQueryable{``2},System.Data.IDbTransaction)">
            <summary>
            执行 SQL 语句，并返回两个实体集合
            </summary>
            <param name="query1">SQL 命令</param>
            <param name="query2">SQL 命令</param>
            <param name="query3">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteMultipleAsync``3(Inte.XFramework.Data.IDbQueryable{``0},Inte.XFramework.Data.IDbQueryable{``1},Inte.XFramework.Data.IDbQueryable{``2},System.Data.IDbTransaction)">
            <summary>
            异步执行 SQL 语句，并返回两个实体集合
            </summary>
            <param name="query1">SQL 命令</param>
            <param name="query2">SQL 命令</param>
            <param name="query3">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteMultiple``7(System.String,System.Data.IDbTransaction)">
            <summary>
            执行 SQL 语句，并返回多个实体集合
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteMultipleAsync``7(System.String,System.Data.IDbTransaction)">
            <summary>
            异步执行 SQL 语句，并返回多个实体集合
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteMultiple``7(System.Data.IDbCommand,Inte.XFramework.Data.CommandDefine[])">
            <summary>
            执行 SQL 语句，并返回多个实体集合
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="defines">命令定义对象，用于解析实体的外键</param>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteMultipleAsync``7(System.Data.IDbCommand,Inte.XFramework.Data.CommandDefine[])">
            <summary>
            异步执行 SQL 语句，并返回多个实体集合
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="defines">命令定义对象，用于解析实体的外键</param>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteList``1(Inte.XFramework.Data.IDbQueryable{``0},System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回 <see cref="!:IEnumerable"/> 对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteList``1(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回 <see cref="!:IEnumerable"/> 对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteList``1(System.Data.IDbCommand,Inte.XFramework.Data.CommandDefine)">
            <summary>
            执行SQL 语句，并返回 <see cref="!:IEnumerable"/> 对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="cmd">SQL 命令</param>
            <param name="define">命令定义对象，用于解析实体的外键</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteListAsync``1(Inte.XFramework.Data.IDbQueryable{``0},System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回 <see cref="!:IEnumerable"/> 对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteListAsync``1(System.String,System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回 <see cref="!:IEnumerable"/> 对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteListAsync``1(System.Data.IDbCommand,Inte.XFramework.Data.CommandDefine)">
            <summary>
            异步执行SQL 语句，并返回 <see cref="!:IEnumerable"/> 对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="cmd">SQL 命令</param>
            <param name="define">命令定义对象，用于解析实体的外键</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteDataTable(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.DataTable"/> 对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteDataTable(System.Data.IDbCommand)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.DataTable"/> 对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteDataTableAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回 <see cref="T:System.Data.DataTable"/> 对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteDataTableAsync(System.Data.IDbCommand)">
            <summary>
            异步执行SQL 语句，并返回 <see cref="T:System.Data.DataTable"/> 对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteDataSet(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.DataSet"/> 对象
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteDataSet(System.Data.IDbCommand)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.DataSet"/> 对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteDataSetAsync(System.Data.IDbCommand)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.DataSet"/> 对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryProviderBase.ExecuteDataSetAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.DataSet"/> 对象
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.Data.DbQueryProviderBase.NOOP">
            <summary>
            空类
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.DbQueryProviderBase.ExceptionEventArgs">
            <summary>
            包含异常事件数据的类
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryProviderBase.ExceptionEventArgs.Command">
            <summary>
            产生异常的SQL命令
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.DbQueryProviderBase.ExceptionEventArgs.Exception">
            <summary>
            异常来源
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.ColumnExpressionVisitor">
            <summary>
            选择列表达式解析器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ColumnExpressionVisitor.#ctor(Inte.XFramework.Data.DbQueryProviderBase,Inte.XFramework.Data.TableAliasCache,Inte.XFramework.Data.DbExpression,Inte.XFramework.Data.DbExpression,System.Boolean)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.ColumnExpressionVisitor"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ColumnExpressionVisitor.Write(Inte.XFramework.Data.SqlBuilder)">
            <summary>
            将表达式所表示的SQL片断写入SQL构造器
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ColumnExpressionVisitor.Columns">
            <summary>
            SELECT 字段
            Column 对应实体的原始属性
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ColumnExpressionVisitor.NavDescriptors">
            <summary>
            导航属性描述信息
            从 DataReader 到实体的映射需要使用这些信息来给导航属性赋值
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.ExpressionVisitorBase">
            <summary>
            表达式解析器基类，提供公共的表达式处理方式
            </summary>
        </member>
        <member name="F:Inte.XFramework.Data.ExpressionVisitorBase._builder">
            <summary>
            SQL 构造器
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ExpressionVisitorBase.Expression">
            <summary>
            即将解析的表达式
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ExpressionVisitorBase.Navigations">
            <summary>
            导航属性
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ExpressionVisitorBase.#ctor(Inte.XFramework.Data.DbQueryProviderBase,Inte.XFramework.Data.TableAliasCache,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.ExpressionVisitorBase"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ExpressionVisitorBase.Write(Inte.XFramework.Data.SqlBuilder)">
            <summary>
            将表达式所表示的SQL片断写入SQL构造器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ExpressionVisitorBase.Append(System.String)">
            <summary>
            追加指定字符串
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ExpressionVisitorBase.GetSqlValue(System.Object,System.Linq.Expressions.MemberExpression)">
            <summary>
            取值对应的sql片断
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.GroupByExpressionVisitor">
            <summary>
            Group By 表达式解析器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.GroupByExpressionVisitor.#ctor(Inte.XFramework.Data.DbQueryProviderBase,Inte.XFramework.Data.TableAliasCache,Inte.XFramework.Data.DbExpression)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.GroupByExpressionVisitor"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.GroupByExpressionVisitor.Write(Inte.XFramework.Data.SqlBuilder)">
            <summary>
            将表达式所表示的SQL片断写入SQL构造器
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.HavingExpressionVisitor">
            <summary>
            HAVING 表达式解析器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.HavingExpressionVisitor.#ctor(Inte.XFramework.Data.DbQueryProviderBase,Inte.XFramework.Data.TableAliasCache,Inte.XFramework.Data.DbExpression,Inte.XFramework.Data.DbExpression)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.HavingExpressionVisitor"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.HavingExpressionVisitor.Write(Inte.XFramework.Data.SqlBuilder)">
            <summary>
            将表达式所表示的SQL片断写入SQL构造器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.HavingExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            遍历表达式
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.JoinExpressionVisitor">
            <summary>
            JOIN 表达式解析器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.JoinExpressionVisitor.#ctor(Inte.XFramework.Data.DbQueryProviderBase,Inte.XFramework.Data.TableAliasCache,System.Collections.Generic.List{Inte.XFramework.Data.DbExpression})">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.JoinExpressionVisitor"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.JoinExpressionVisitor.Write(Inte.XFramework.Data.SqlBuilder)">
            <summary>
            将表达式所表示的SQL片断写入SQL构造器
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.JoinExpressionVisitor.JoinType">
            <summary>
            关联类型
            </summary>
        </member>
        <member name="F:Inte.XFramework.Data.JoinExpressionVisitor.JoinType.InnerJoin">
            <summary>
            内关联
            </summary>
        </member>
        <member name="F:Inte.XFramework.Data.JoinExpressionVisitor.JoinType.LeftJoin">
            <summary>
            左关联
            </summary>
        </member>
        <member name="F:Inte.XFramework.Data.JoinExpressionVisitor.JoinType.CrossJoin">
            <summary>
            全关联
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.MethodCallExressionVisitorBase">
            <summary>
            方法表达式访问器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.MethodCallExressionVisitorBase.VisitMethodCall(System.Linq.Expressions.MethodCallExpression,Inte.XFramework.Data.ExpressionVisitorBase)">
            <summary>
            访问表示方法调用的节点
            </summary>
            <param name="node">方法调用节点</param>
            <param name="visitorBase">访问器</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.MethodCallExressionVisitorBase.VisitEqualNull(System.Linq.Expressions.BinaryExpression,Inte.XFramework.Data.ExpressionVisitorBase)">
            <summary>
            访问表示 null 判断运算的节点 a.Name == null
            </summary>
            <param name="b">二元表达式节点</param>
            <param name="visitorBase">访问器</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.MethodCallExressionVisitorBase.VisitCoalesce(System.Linq.Expressions.BinaryExpression,Inte.XFramework.Data.ExpressionVisitorBase)">
            <summary>
            访问表示 null 合并运算的节点 a ?? b
            </summary>
            <param name="b">二元表达式节点</param>
            <param name="visitorBase">访问器</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.MethodCallExressionVisitorBase.VisitMemberMember(System.Linq.Expressions.MemberExpression,Inte.XFramework.Data.ExpressionVisitorBase)">
            <summary>
            访问表示字段或者属性的属性的节点 a.Name.Length
            </summary>
            <param name="node">字段或者属性节点</param>
            <param name="visitorBase">访问器</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.MethodCallExressionVisitorBase.GetLenFuncName(System.Linq.Expressions.MemberExpression,Inte.XFramework.Data.ExpressionVisitorBase)">
            <summary>
            获取 Length 属性对应的SQL函数
            </summary>
            <param name="node">字段或者属性节点</param>
            <param name="visitorBase">访问器</param>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.Data.OrderByExpressionVisitor">
            <summary>
            Order By 表达式解析器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.OrderByExpressionVisitor.#ctor(Inte.XFramework.Data.DbQueryProviderBase,Inte.XFramework.Data.TableAliasCache,System.Collections.Generic.List{Inte.XFramework.Data.DbExpression},Inte.XFramework.Data.DbExpression,System.String)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.OrderByExpressionVisitor"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.OrderByExpressionVisitor.Write(Inte.XFramework.Data.SqlBuilder)">
            <summary>
            将表达式所表示的SQL片断写入SQL构造器
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.PartialVisitor">
            <summary>
            Evaluate Expression
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.NominateVisitor">
            <summary>
            Nominate Locally Expression
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.StatisExpressionVisitor">
            <summary>
            统计函数 表达式解析器
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.StatisExpressionVisitor.ColumnName">
            <summary>
            统计的列名 在嵌套统计时使用
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.StatisExpressionVisitor.#ctor(Inte.XFramework.Data.DbQueryProviderBase,Inte.XFramework.Data.TableAliasCache,Inte.XFramework.Data.DbExpression,Inte.XFramework.Data.DbExpression,System.String)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.StatisExpressionVisitor"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.StatisExpressionVisitor.Write(Inte.XFramework.Data.SqlBuilder)">
            <summary>
            将表达式所表示的SQL片断写入SQL构造器
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.UpdateExpressionVisitor">
            <summary>
            UPDATE 表达式解析器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.UpdateExpressionVisitor.#ctor(Inte.XFramework.Data.DbQueryProviderBase,Inte.XFramework.Data.TableAliasCache,System.Linq.Expressions.Expression)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.UpdateExpressionVisitor"/> 类的新实例
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.WhereExpressionVisitor">
            <summary>
            WHERE 表达式解析器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.WhereExpressionVisitor.#ctor(Inte.XFramework.Data.DbQueryProviderBase,Inte.XFramework.Data.TableAliasCache,Inte.XFramework.Data.DbExpression)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.WhereExpressionVisitor"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.WhereExpressionVisitor.Write(Inte.XFramework.Data.SqlBuilder)">
            <summary>
            将表达式所表示的SQL片断写入SQL构造器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.WhereExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            遍历表达式
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DataRecordExtensions.ToModel``1(System.Data.IDataRecord,Inte.XFramework.Data.CommandDefine)">
            <summary>
            将 <see cref="T:System.Data.IDataRecord"/> 映射为实体 
            </summary>
            <typeparam reader="T">数据源</typeparam>
            <param name="reader">数据源</param>
            <param name="define">命令定义</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Any``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
            确定序列是否包含任何元素
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Any``1(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            确定序列是否包含任何元素
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Count``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
            返回序列中的元素数量
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Count``1(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            返回指定序列中满足条件的元素数量
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.CountAsync``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
            返回序列中的元素数量
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.CountAsync``1(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            返回指定序列中满足条件的元素数量
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.GroupBy``2(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.GroupBy``3(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
            <summary>
            根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.DefaultIfEmpty``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
             返回指定序列的元素；如果序列为空，则返回单一实例集合中的类型参数的默认值
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Distinct``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
             通过使用默认的相等比较器对值进行比较返回序列中的非重复元素
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.FirstOrDefault``1(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
             返回序列中满足指定条件的第一个元素，如果未找到这样的元素，则返回默认值
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.FirstOrDefaultAsync``1(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
             返回序列中满足指定条件的第一个元素，如果未找到这样的元素，则返回默认值
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.GroupJoin``4(Inte.XFramework.Data.IDbQueryable{``0},Inte.XFramework.Data.IDbQueryable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,Inte.XFramework.Data.IDbQueryable{``1},``3}})">
            <summary>
             基于键相等对两个序列的元素进行左关联并对结果进行分组
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Include``2(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
             指示查询应该包含外键
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Join``4(Inte.XFramework.Data.IDbQueryable{``0},Inte.XFramework.Data.IDbQueryable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
            <summary>
             基于匹配键对两个序列的元素进行关联。使用默认的相等比较器对键进行比较
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Max``2(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            返回泛型 IDbQueryable&lt;TResult&gt; 中的最大值
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Min``2(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            返回泛型 IDbQueryable&lt;TResult&gt; 中的最小值
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Average``2(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            返回泛型 IDbQueryable&lt;TResult&gt; 中的平均值
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Sum``2(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            返回泛型 IDbQueryable&lt;TResult&gt; 中的所有值之和
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.OrderBy``2(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
             根据键按升序对序列的元素排序
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.OrderBy``1(Inte.XFramework.Data.IDbQueryable{``0},System.String)">
            <summary>
             根据键按升序对序列的元素排序
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.OrderByDescending``2(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
             根据键按降序对序列的元素排序
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Select``2(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
             通过合并元素的索引将序列的每个元素投影到新表中
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.SelectMany``3(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,Inte.XFramework.Data.IDbQueryable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
             将序列的每个元素投影并将结果序列组合为一个序列
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Skip``1(Inte.XFramework.Data.IDbQueryable{``0},System.Int32)">
            <summary>
             跳过序列中指定数量的元素，然后返回剩余的元素
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Take``1(Inte.XFramework.Data.IDbQueryable{``0},System.Int32)">
            <summary>
             从序列的开头返回指定数量的连续元素
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Union``1(Inte.XFramework.Data.IDbQueryable{``0},Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
             通过使用默认的相等比较器生成两个序列的并集。
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ThenBy``2(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
             根据某个键按升序对序列中的元素执行后续排序
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ThenByDescending``2(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
             根据某个键按降序对序列中的元素执行后续排序
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.Where``1(Inte.XFramework.Data.IDbQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
             基于谓词筛选值序列。将在谓词函数的逻辑中使用每个元素的索引
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToArray``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
             从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建一个数组
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToArray``1(Inte.XFramework.Data.IDbQueryable{``0},System.Int32,System.Int32)">
            <summary>
             从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建一个数组
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToList``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
             从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建 <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToList``1(Inte.XFramework.Data.IDbQueryable{``0},System.Int32,System.Int32)">
            <summary>
             从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建 <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToArrayAsync``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
             从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建一个数组
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToArrayAsync``1(Inte.XFramework.Data.IDbQueryable{``0},System.Int32,System.Int32)">
            <summary>
             从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建一个数组
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToListAsync``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
             从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建 <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToListAsync``1(Inte.XFramework.Data.IDbQueryable{``0},System.Int32,System.Int32)">
            <summary>
             从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建 <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToDataTable``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
             从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建 <see cref="T:System.Data.DataTable"/>
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToDataTableAsync``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
             从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建 <see cref="T:System.Data.DataTable"/>
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToDataSet``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
             从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建 <see cref="T:System.Data.DataSet"/>
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToDataSetAsync``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
             从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建 <see cref="T:System.Data.DataSet"/>
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToPagedList``1(Inte.XFramework.Data.IDbQueryable{``0},System.Int32,System.Int32)">
            <summary>
             从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建 <see cref="T:Inte.XFramework.PagedList`1"/>
             pageSize = 1024 表示取所有
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.DbQueryableExtensions.ToPagedListAsync``1(Inte.XFramework.Data.IDbQueryable{``0},System.Int32,System.Int32)">
            <summary>
             异步从 <see cref="T:Inte.XFramework.Data.IDbQueryable`1"/> 创建 <see cref="T:Inte.XFramework.PagedList`1"/>
             pageSize = 1024 表示取所有
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ExpressionExtensions.IsAnonymous(System.Linq.Expressions.Expression)">
            <summary>
            判断属性访问表达式是否有系统动态生成前缀
            <code>
            h__TransparentIdentifier.a.CompanyName
            </code>
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ExpressionExtensions.IsGrouping(System.Linq.Expressions.Expression)">
            <summary>
            判断是否是分组表达式
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ExpressionExtensions.IsVisitable(System.Linq.Expressions.Expression)">
            <summary>
            在递归访问 MemberAccess 表达式时，判定节点是否能够被继续递归访问
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ExpressionExtensions.IsConstant(System.Linq.Expressions.MemberExpression)">
            <summary>
            判断表达式链是否是常量类型
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ExpressionExtensions.GetKeyWidthoutAnonymous(System.Linq.Expressions.MemberExpression)">
            <summary>
            取剔除掉系统动态生成前缀后的表达式
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ExpressionExtensions.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
            计算表达式的值
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.Data.IDbQueryable">
            <summary>
            提供对未指定数据类型的特定数据源的查询进行计算的功能
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.IDbQueryable.Provider">
            <summary>
            数据查询提供者
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.IDbQueryable.DbExpressions">
            <summary>
            查询表达式
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.IDbQueryable.DbQueryInfo">
            <summary>
            转换后的查询对象
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.IDbQueryable.Bulk">
            <summary>
            批量插入信息
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.IDbQueryableInfo">
            <summary>
            提供对数据类型未知的特定数据源进行增/删/改查的语义表示
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.IDbQueryableInfo_Insert">
            <summary>
            提供对数据类型未知的特定数据源进行新增的语义表示
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.IDbQueryableInfo_Insert.Entity">
            <summary>
            插入的实体
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.IDbQueryableInfo_Insert.AutoIncrement">
            <summary>
            自增列
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.IDbQueryableInfo`1">
            <summary>
            提供对数据类型未知的特定数据源进行增/删/改查的语义表示
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.IDbQueryable`1">
            <summary>
            提供对数据类型已知的特定数据源的查询进行计算的功能
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryable`1.CreateQuery``1(Inte.XFramework.Data.DbExpressionType,System.Linq.Expressions.Expression)">
            <summary>
            构造一个 <see cref="T:Inte.XFramework.Data.IDbQueryable"/> 对象，该对象可计算指定表达式树所表示的查询
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryable`1.CreateQuery``1(Inte.XFramework.Data.DbExpression)">
            <summary>
            构造一个 <see cref="T:Inte.XFramework.Data.IDbQueryable"/> 对象，该对象可计算指定表达式树所表示的查询
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.IDbQueryProvider">
            <summary>
            定义用于解析和执行 <see cref="T:Inte.XFramework.Data.IDbQueryable"/> 对象所描述的查询方法
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.IDbQueryProvider.EscCharLeft">
            <summary>
            表名/字段的左括号
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.IDbQueryProvider.EscCharRight">
            <summary>
            表名/字段的右括号
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.IDbQueryProvider.DbProvider">
            <summary>
            数据源类的提供程序
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.IDbQueryProvider.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.IDbQueryProvider.ProviderName">
            <summary>
            <see cref="T:Inte.XFramework.Data.IDbQueryProvider"/> 实例的名称
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.IDbQueryProvider.ParameterPrefix">
            <summary>
            命令参数前缀
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.IDbQueryProvider.CommandTimeout">
            <summary>
            执行命令超时时间
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.CreateConnection(System.Boolean)">
            <summary>
            创建数据库连接
            </summary>
            <param name="isOpen">是否打开连接</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.CreateConnectionAsync(System.Boolean)">
            <summary>
            异步创建数据库连接
            </summary>
            <param name="isOpen">是否打开连接</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.Parse``1(Inte.XFramework.Data.IDbQueryable{``0})">
            <summary>
            创建 SQL 命令
            </summary>
            <param name="query">查询 语句</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.CreateCommand(System.String,System.Data.IDbTransaction,System.Nullable{System.Data.CommandType},System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            创建 SQL 命令
            </summary>
            <param name="commandText">SQL 语句</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.CreateParameter">
            <summary>
            创建命令参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.CreateParameter(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Int32},System.Nullable{System.Data.ParameterDirection})">
            <summary>
            创建命令参数
            </summary>
            <param name="parameterName">存储过程名称</param>
            <param name="value">参数值</param>
            <param name="dbType">参数类型</param>
            <param name="size">参数大小</param>
            <param name="direction">参数方向</param>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteNonQuery(System.String,System.Data.IDbTransaction)">
            <summary>
            执行 SQL 语句，并返回受影响的行数
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            执行 SQL 语句，并返回受影响的行数
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteNonQueryAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            异步执行 SQL 语句，并返回受影响的行数
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteNonQueryAsync(System.Data.IDbCommand)">
            <summary>
            异步执行 SQL 语句，并返回受影响的行数
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteScalar(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            执行SQL 语句，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteScalarAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteScalarAsync(System.Data.IDbCommand)">
            <summary>
            异步执行SQL 语句，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteReader(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.IDataReader"/> 对象
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteReader(System.Data.IDbCommand)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.IDataReader"/> 对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteReaderAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回 <see cref="T:System.Data.IDataReader"/> 对象
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteReaderAsync(System.Data.IDbCommand)">
            <summary>
            异步执行SQL 语句，并返回 <see cref="T:System.Data.IDataReader"/> 对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.Execute``1(Inte.XFramework.Data.IDbQueryable{``0},System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回单个实体对象
            </summary>
            <param name="query">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.Execute``1(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回单个实体对象
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.Execute``1(System.Data.IDbCommand,Inte.XFramework.Data.CommandDefine)">
            <summary>
            执行SQL 语句，并返回单个实体对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="define">命令定义对象，用于解析实体的外键</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.Execute(System.Collections.Generic.List{System.String},System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回新增记录时的自增Id列表
            <code> 批量 增/删/改 时用 </code>
            </summary>
            <param name="sqlList">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteAsync``1(Inte.XFramework.Data.IDbQueryable{``0},System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回单个实体对象
            </summary>
            <param name="query">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteAsync``1(System.String,System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回单个实体对象
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteAsync``1(System.Data.IDbCommand,Inte.XFramework.Data.CommandDefine)">
            <summary>
            异步执行SQL 语句，并返回单个实体对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="cmd">SQL 命令</param>
            <param name="define">命令定义对象，用于解析实体的外键</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteAsync(System.Collections.Generic.List{System.String},System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回新增记录时的自增Id列表
            <code> 批量 增/删/改 时用 </code>
            </summary>
            <param name="sqlList">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteMultiple``2(Inte.XFramework.Data.IDbQueryable{``0},Inte.XFramework.Data.IDbQueryable{``1},System.Data.IDbTransaction)">
            <summary>
            执行 SQL 语句，并返回两个实体集合
            </summary>
            <param name="query1">SQL 命令</param>
            <param name="query2">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteMultipleAsync``2(Inte.XFramework.Data.IDbQueryable{``0},Inte.XFramework.Data.IDbQueryable{``1},System.Data.IDbTransaction)">
            <summary>
            异步执行 SQL 语句，并返回两个实体集合
            </summary>
            <param name="query1">SQL 命令</param>
            <param name="query2">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteMultiple``3(Inte.XFramework.Data.IDbQueryable{``0},Inte.XFramework.Data.IDbQueryable{``1},Inte.XFramework.Data.IDbQueryable{``2},System.Data.IDbTransaction)">
            <summary>
            执行 SQL 语句，并返回两个实体集合
            </summary>
            <param name="query1">SQL 命令</param>
            <param name="query2">SQL 命令</param>
            <param name="query3">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteMultipleAsync``3(Inte.XFramework.Data.IDbQueryable{``0},Inte.XFramework.Data.IDbQueryable{``1},Inte.XFramework.Data.IDbQueryable{``2},System.Data.IDbTransaction)">
            <summary>
            异步执行 SQL 语句，并返回两个实体集合
            </summary>
            <param name="query1">SQL 命令</param>
            <param name="query2">SQL 命令</param>
            <param name="query3">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteMultiple``7(System.String,System.Data.IDbTransaction)">
            <summary>
            执行 SQL 语句，并返回多个实体集合
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteMultipleAsync``7(System.String,System.Data.IDbTransaction)">
            <summary>
            异步执行 SQL 语句，并返回多个实体集合
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteMultiple``7(System.Data.IDbCommand,Inte.XFramework.Data.CommandDefine[])">
            <summary>
            执行 SQL 语句，并返回多个实体集合
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="defines">命令定义对象，用于解析实体的外键</param>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteMultipleAsync``7(System.Data.IDbCommand,Inte.XFramework.Data.CommandDefine[])">
            <summary>
            异步执行 SQL 语句，并返回多个实体集合
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="defines">命令定义对象，用于解析实体的外键</param>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteList``1(Inte.XFramework.Data.IDbQueryable{``0},System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回并返回单结果集集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteList``1(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回并返回单结果集集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteList``1(System.Data.IDbCommand,Inte.XFramework.Data.CommandDefine)">
            <summary>
            执行SQL 语句，并返回并返回单结果集集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="cmd">SQL 命令</param>
            <param name="define">命令定义对象，用于解析实体的外键</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteListAsync``1(Inte.XFramework.Data.IDbQueryable{``0},System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回并返回单结果集集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteListAsync``1(System.String,System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回单结果集集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteListAsync``1(System.Data.IDbCommand,Inte.XFramework.Data.CommandDefine)">
            <summary>
            异步执行SQL 语句，并返回并返回单结果集集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="cmd">SQL 命令</param>
            <param name="define">命令定义对象，用于解析实体的外键</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteDataTable(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回并返回单结果集集合
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteDataTable(System.Data.IDbCommand)">
            <summary>
            执行SQL 语句，并返回并返回单结果集集合
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteDataTableAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            异步执行SQL 语句，并返回 <see cref="T:System.Data.DataTable"/> 对象
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteDataTableAsync(System.Data.IDbCommand)">
            <summary>
            异步执行SQL 语句，并返回 <see cref="T:System.Data.DataTable"/> 对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteDataSet(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.DataSet"/> 对象
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteDataSet(System.Data.IDbCommand)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.DataSet"/> 对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteDataSetAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.DataSet"/> 对象
            </summary>
            <param name="commandText">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.IDbQueryProvider.ExecuteDataSetAsync(System.Data.IDbCommand)">
            <summary>
            执行SQL 语句，并返回 <see cref="T:System.Data.DataSet"/> 对象
            </summary>
            <param name="cmd">SQL 命令</param>
            <param name="transaction">事务</param>
            <returns></returns>
        </member>
        <member name="P:Inte.XFramework.Data.ColumnAttribute.IsIdentity">
             <summary>
             对应到数据库中的列名
             </summary>
            public string Name { get; set; }
            <summary>
            是否为自增列
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ColumnAttribute.IsKey">
            <summary>
            是否是主键列
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ColumnAttribute.NoMapped">
            <summary>
            标志该属性不是主表字段
            用途：
            1. 生成 INSERT/UPDATE 语句时忽略此字段
            2. 生成不指定具体字段的 SELECT 语句时忽略此字段
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ColumnAttribute.DbType">
            <summary>
            数据库字段的数据类型
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.ForeignKeyAttribute">
            <summary>
            外键标识
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ForeignKeyAttribute.InnerKeys">
            <summary>
            本表关联外键字段
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ForeignKeyAttribute.OuterKeys">
            <summary>
            外表关联外键字段
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ForeignKeyAttribute.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.ForeignKeyAttribute"/> 的实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ForeignKeyAttribute.#ctor(System.String[])">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.ForeignKeyAttribute"/> 的实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ForeignKeyAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.ForeignKeyAttribute"/> 的实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ForeignKeyAttribute.#ctor(System.String[],System.String[])">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.ForeignKeyAttribute"/> 的实例
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.MemberAccessWrapper">
            <summary>
            类属性访问包装器
            </summary>
            <remarks>适用Data命名空间下的类属性和数据库字段的映射</remarks>
        </member>
        <member name="P:Inte.XFramework.Data.MemberAccessWrapper.Column">
            <summary>
            列特性
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.MemberAccessWrapper.ForeignKey">
            <summary>
            列特性
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.MemberAccessWrapper.#ctor(System.Reflection.MemberInfo)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.MemberAccessWrapper"/> 类的新实例
            </summary>
            <param name="member">成员元数据</param>
        </member>
        <member name="P:Inte.XFramework.Data.TableAttribute.Name">
            <summary>
            映射到数据库的列表
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.TypeRuntimeInfo">
            <summary>
            类型运行时元数据
            </summary>
            <remarks>适用Data命名空间，仅包含类型公开的属性元数据</remarks>
        </member>
        <member name="P:Inte.XFramework.Data.TypeRuntimeInfo.Table">
            <summary>
            类型对应的数据表
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.TypeRuntimeInfo.TableName">
            <summary>
            类型对应的数据表名，如果没有指定Table特性，则使用类型名称做为表名
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.TypeRuntimeInfo.FieldCount">
            <summary>
            获取类型对应数据库的列数。
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.TypeRuntimeInfo.NavWrappers">
            <summary>
            导航属性成员
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.TypeRuntimeInfo.#ctor(System.Type)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.TypeRuntimeInfo"/> 类的新实例
            </summary>
            <param name="type">类型声明</param>
        </member>
        <member name="M:Inte.XFramework.Data.TypeRuntimeInfo.InitializeWrapper(System.Type)">
            <summary>
            初始化成员包装器集合
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.Data.TypeRuntimeInfoCache">
            <summary>
            类型运行时元数据缓存
            </summary>
            <remarks>适用Data命名空间</remarks>
        </member>
        <member name="M:Inte.XFramework.Data.TypeRuntimeInfoCache.GetRuntimeInfo(System.Type)">
            <summary>
            取指定类型的运行时元数据
            </summary>
            <param name="type">类型实例</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.TypeRuntimeInfoCache.GetRuntimeInfo``1">
            <summary>
            取指定类型的运行时元数据
            </summary>
            <typeparam name="T">T</typeparam>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.Data.Column">
            <summary>
            列。记录实体属性原始名称以及出现的次数 
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.Column.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.Column.Duplicate">
            <summary>
            出现次数
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.ColumnNavDescriptorCollection">
            <summary>
            导航属性描述集合
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ColumnNavDescriptorCollection.MinIndex">
            <summary>
            所有导航属性的最小开始索引
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ColumnNavDescriptorCollection.Count">
            <summary>
            包含的元素数
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ColumnNavDescriptorCollection.#ctor">
            <summary>
            实例化<see cref="T:Inte.XFramework.Data.ColumnNavDescriptorCollection"/>类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ColumnNavDescriptorCollection.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.ColumnNavDescriptorCollection.Add(System.String,Inte.XFramework.Data.ColumnNavDescriptor)">
            <summary>
            添加一个带有所提供的键和值的元素。
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ColumnNavDescriptorCollection.ContainsKey(System.String)">
            <summary>
            是否包含具有指定键的元素
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ColumnNavDescriptorCollection.TryGetValue(System.String,Inte.XFramework.Data.ColumnNavDescriptor@)">
            <summary>
            获取与指定的键相关联的值。
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.ColumnNavDescriptor">
            <summary>
            导航属性描述信息，包括：导航属性名称，字段在 DataReader 中的取值范围
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ColumnNavDescriptor.Name">
            <summary>
            导航属性名称
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ColumnNavDescriptor.KeyName">
            <summary>
            全名称
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ColumnNavDescriptor.Member">
            <summary>
            导航属性对应
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ColumnNavDescriptor.Start">
            <summary>
            对应 DataReader 的索引，表示从这个位置开始到 End 位置的所有字段都是属于该导航属性
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.ColumnNavDescriptor.Count">
            <summary>
            对应 DataReader 的索引，表示从 Start 位置开始到该位置的所有字段都是属于该导航属性
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.ColumnNavDescriptor.#ctor(System.String,System.Reflection.MemberInfo)">
            <summary>
            实例化<see cref="T:Inte.XFramework.Data.ColumnNavDescriptor"/>类的新实例
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.CommandDefine">
            <summary>
            命令定义
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.CommandDefine.CommandText">
            <summary>
            针对数据源运行的文本命令
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.CommandDefine.Parameters">
            <summary>
            命令参数
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.CommandDefine.CommandType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.CommandDefine.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter},System.Nullable{System.Data.CommandType})">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.CommandDefine"/> 类的新实例
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.CommandDefine_Select">
            <summary>
            SELECT 命令定义
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.CommandDefine_Select.CommandText">
            <summary>
            针对数据源运行的文本命令
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.CommandDefine_Select.Columns">
            <summary>
            SELECT 字段范围
            </summary>
            <remarks>INSERT 表达式可能用这些字段</remarks>
        </member>
        <member name="P:Inte.XFramework.Data.CommandDefine_Select.NavDescriptors">
            <summary>
            导航属性描述
            包括：导航属性名称，字段在 DataReader 中的取值范围
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.CommandDefine_Select.JoinFragment">
            <summary>
            JOIN（含） 之前的片断
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.CommandDefine_Select.WhereFragment">
            <summary>
            Where 之后的片断
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.CommandDefine_Select.#ctor(System.Char,System.Char,Inte.XFramework.Data.TableAliasCache)">
            <summary>
            实例化 <see cref="T:Inte.XFramework.Data.CommandDefine_Select"/> 类的新实例
            </summary>
            <param name="escCharLeft">如 [</param>
            <param name="escCharRight">如 ]</param>
            <param name="aliases">别名</param>
        </member>
        <member name="M:Inte.XFramework.Data.CommandDefine_Select.AddNavigation(System.Collections.Generic.IDictionary{System.String,System.Linq.Expressions.MemberExpression})">
            <summary>
            合并外键
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.CommandDefine_Select.Builder">
            <summary>
            SELECT 命令构造器
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.CommandDefine_Select.Builder.Command">
            <summary>
            SQL 命令
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.CommandDefine_Select.Builder.JoinFragment">
            <summary>
            JOIN（含） 之前的片断
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.CommandDefine_Select.Builder.WhereFragment">
            <summary>
            Where 之后的片断
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.CommandDefine_Select.Builder.AdditionForeigns">
            <summary>
            附加外键，用来构造额外的表达式没有显式指定的外键 Left Join 语句
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.CommandDefine_Select.Builder.#ctor(System.Char,System.Char,Inte.XFramework.Data.TableAliasCache)">
            <summary>
            实例化 <see cref="T:Inte.XFramework.Data.CommandDefine_Select.Builder" /> 的新实例
            </summary>
            <param name="escCharLeft">如 [</param>
            <param name="escCharRight">如 ]</param>
            <param name="aliases">别名</param>
        </member>
        <member name="M:Inte.XFramework.Data.CommandDefine_Select.Builder.AddNavigation(System.Collections.Generic.IDictionary{System.String,System.Linq.Expressions.MemberExpression})">
            <summary>
            合并外键
            </summary>
        </member>
        <member name="T:Inte.XFramework.Data.TypeDeserializer`1">
            <summary>
            类型序列化器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.TypeDeserializer`1.Deserialize">
            <summary>
            将 <see cref="T:System.Data.IDataRecord"/> 上的当前行反序列化为实体
            </summary>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.Data.SqlBuilder">
            <summary>
            SQL 语句构造器
            </summary>
        </member>
        <member name="F:Inte.XFramework.Data.SqlBuilder.TAB">
            <summary>
            TAB 制表符
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.SqlBuilder.Length">
            <summary>
            获取或设置当前 <see cref="T:System.Text.StringBuilder"/> 对象的长度。
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.SqlBuilder.Item(System.Int32)">
            <summary>
            获取或设置此实例中指定字符位置处的字符。
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.SqlBuilder.Indent">
            <summary>
            缩进
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.#ctor(System.Char,System.Char)">
            <summary>
            实例化 <see cref="T:Inte.XFramework.Data.SqlBuilder" /> 的新实例
            </summary>
            <param name="escCharLeft">如 [</param>
            <param name="escCharRight">如 ]</param>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.AppendMember(Inte.XFramework.Data.TableAliasCache,System.Linq.Expressions.Expression)">
            <summary>
            追加列名
            </summary>
            <param name="aliases">表别名</param>
            <param name="expression">列名表达式</param>
            <returns>返回解析到的表别名</returns>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.AppendMember(System.Linq.Expressions.Expression,Inte.XFramework.Data.TableAliasCache)">
            <summary>
            追加列名
            </summary>
            <param name="expression">列名表达式</param>
            <param name="aliases">表别名</param>
            <returns>返回解析到的表别名</returns>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.AppendMember(System.String,System.String)">
            <summary>
            追加列名
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.AppendMember(System.String)">
            <summary>
            追加列名
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.AppendAs(System.String)">
            <summary>
            在此实例的结尾追加 AS
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.Append(System.String)">
            <summary>
            在此实例的结尾追加指定字符串的副本。
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.Insert(System.Int32,System.String)">
            <summary>
            将字符串插入到此实例中的指定字符位置。
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.Insert(System.Int32,System.Object)">
            <summary>
            将字符串插入到此实例中的指定字符位置。
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.Append(System.Int32)">
            <summary>
            在此实例的结尾追加指定字符串的副本。
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.Append(System.Char)">
            <summary>
            在此实例的结尾追加指定字符串的副本。
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.Append(System.Object)">
            <summary>
            在此实例的结尾追加指定字符串的副本。
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.AppendNewLine">
            <summary>
            在此实例的结尾追加回车符
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.AppendNewLine(System.String)">
            <summary>
            在此实例的结尾追加回车符
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.AppendFormat(System.String,System.Object[])">
            <summary>
            将通过处理复合格式字符串（包含零个或零个以上格式项）返回的字符串追加到此实例。每个格式项都替换为形参数组中相应实参的字符串表示形式。
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.AppendNewTab">
            <summary>
            在此实例的结尾追加制表符
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.Replace(System.String,System.String)">
            <summary>
            将此实例中所有指定字符串的匹配项替换为其他指定字符串。
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlBuilder.ToString">
            <summary>
            将此值实例转换成 <see cref="T:System.String"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.Data.SqlClient.DbQueryProvider">
            <summary>
            数据查询提供者
            </summary>
            <remarks>
            2、表别名根据Lambda表达式的参数取得
            </remarks>
        </member>
        <member name="P:Inte.XFramework.Data.SqlClient.DbQueryProvider.MethodVisitor">
            <summary>
            方法表达式访问器
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.SqlClient.DbQueryProvider.EscCharLeft">
            <summary>
            数据库安全字符 左
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.SqlClient.DbQueryProvider.EscCharRight">
            <summary>
            数据库安全字符 右
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.SqlClient.DbQueryProvider.ProviderName">
            <summary>
            数据查询提供者 名称
            </summary>
        </member>
        <member name="P:Inte.XFramework.Data.SqlClient.DbQueryProvider.ParameterPrefix">
            <summary>
            命令参数前缀
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlClient.DbQueryProvider.#ctor">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.SqlClient.DbQueryProvider"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlClient.DbQueryProvider.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Data.SqlClient.DbQueryProvider"/> 类的新实例
            </summary>
            <param name="connString">数据库连接字符串</param>
        </member>
        <member name="T:Inte.XFramework.Data.SqlClient.MethodCallExressionVisitor">
            <summary>
            <see cref="T:System.Linq.Expressions.MethodCallExpression"/> 表示式访问器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.SqlClient.MethodCallExressionVisitor.VisitEqualNull(System.Linq.Expressions.BinaryExpression,Inte.XFramework.Data.ExpressionVisitorBase)">
            <summary>
            访问表示 null 判断运算的节点 a.Name == null
            </summary>
            <param name="b">二元表达式节点</param>
            <param name="ExpressionVisitorBase">访问器</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.SqlClient.MethodCallExressionVisitor.VisitCoalesce(System.Linq.Expressions.BinaryExpression,Inte.XFramework.Data.ExpressionVisitorBase)">
            <summary>
            访问表示 null 合并运算的节点 a ?? b
            </summary>
            <param name="b">二元表达式节点</param>
            <param name="visitor">访问器</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.SqlClient.MethodCallExressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression,Inte.XFramework.Data.ExpressionVisitorBase)">
            <summary>
            访问表示方法调用的节点
            </summary>
            <param name="node">方法调用节点</param>
            <param name="visitor">访问器</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.SqlClient.MethodCallExressionVisitor.VisitMemberMember(System.Linq.Expressions.MemberExpression,Inte.XFramework.Data.ExpressionVisitorBase)">
            <summary>
            访问表示字段或者属性的属性的节点 a.Name.Length
            </summary>
            <param name="node">字段或者属性节点</param>
            <param name="visitor">访问器</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.SqlClient.MethodCallExressionVisitor.GetLenFuncName(System.Linq.Expressions.MemberExpression,Inte.XFramework.Data.ExpressionVisitorBase)">
            <summary>
            获取 Length 属性对应的SQL函数
            </summary>
            <param name="node">字段或者属性节点</param>
            <param name="visitorBase">访问器</param>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.Data.TableAliasCache">
            <summary>
            表别名缓存项
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.TableAliasCache.#ctor">
            <summary>
            实例化 <see cref="T:Inte.XFramework.Data.TableAliasCache"/> 类的新实例
            </summary>
        </member>
        <member name="M:Inte.XFramework.Data.TableAliasCache.#ctor(System.Int32)">
            <summary>
            实例化 <see cref="T:Inte.XFramework.Data.TableAliasCache"/> 类的新实例
            </summary>
            <param name="num">FROM 和 JOIN 表达式所占有的总数</param>
        </member>
        <member name="M:Inte.XFramework.Data.TableAliasCache.GetTableAlias(System.Linq.Expressions.Expression)">
            <summary>
            根据指定表达式取表别名
            </summary>
            <param name="exp">表达式</param> 
            <remarks>
            t=>t.Id
            t.Id
            </remarks>
        </member>
        <member name="M:Inte.XFramework.Data.TableAliasCache.GetTableAlias(System.String)">
            <summary>
             根据指定键值取表别名
            </summary>
            <param name="key">键值</param>
        </member>
        <member name="M:Inte.XFramework.Data.TableAliasCache.GetNavigationTableAlias(System.String)">
            <summary>
             根据指定键值取导航属性对应的表别名
            </summary>
            <param name="key">键值</param>
        </member>
        <member name="M:Inte.XFramework.Data.TableAliasCache.AddOrUpdateJoinTableAlias(System.String,System.String)">
            <summary>
            建立 表名/表别名 键值对
            由查询表达式中显示指定的 左/内关联提供
            </summary>
            <param name="name">表名</param>
            <param name="alias">别名（t0,t1）</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Data.TableAliasCache.GetJoinTableAlias(System.String)">
            <summary>
             根据物理表名取其对应的别名
             由查询表达式中显示指定的 左/内关联提供
            </summary>
            <param name="name">表名</param>
        </member>
        <member name="T:Inte.XFramework.Reflection.Emit.MemberAccess_Field">
            <summary>
            字段成员访问器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Reflection.Emit.MemberAccess_Field.#ctor(System.Reflection.FieldInfo)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Reflection.Emit.MemberAccess_Field"/> 类的新实例
            </summary>
            <param name="fi">字段元数据</param>
        </member>
        <member name="M:Inte.XFramework.Reflection.Emit.MemberAccess_Field.Get(System.Object)">
            <summary>
            Get 字段值
            </summary>
            <param name="target">拥有该成员的类实例</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.Emit.MemberAccess_Field.Set(System.Object,System.Object)">
            <summary>
            Set 字段值
            </summary>
            <param name="target">拥有该成员的类实例</param>
            <param name="value">字段/属性值</param>
        </member>
        <member name="T:Inte.XFramework.Reflection.Emit.MemberAccess_Property">
            <summary>
            属性成员访问器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Reflection.Emit.MemberAccess_Property.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Reflection.Emit.MemberAccess_Property"/> 类的新实例
            </summary>
            <param name="pi">字段元数据</param>
        </member>
        <member name="M:Inte.XFramework.Reflection.Emit.MemberAccess_Property.Get(System.Object)">
            <summary>
            Get 属性值
            </summary>
            <param name="target">拥有该成员的类实例</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.Emit.MemberAccess_Property.Set(System.Object,System.Object)">
            <summary>
            Set 属性值
            </summary>
            <param name="target">拥有该成员的类实例</param>
            <param name="value">字段/属性值</param>
        </member>
        <member name="T:Inte.XFramework.Reflection.Emit.ConstructorInvoker">
            <summary>
            构造函数访问器
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.Emit.ConstructorInvoker.Constructor">
            <summary>
            类的第一个构造函数（无参构造函数）
            </summary>
        </member>
        <member name="M:Inte.XFramework.Reflection.Emit.ConstructorInvoker.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Reflection.MemberAccess"/> 类的新实例
            </summary>
            <param name="constructorInfo">构造函数</param>
        </member>
        <member name="M:Inte.XFramework.Reflection.Emit.ConstructorInvoker.Invoke(System.Object[])">
            <summary>
            动态调用构造函数
            </summary>
            <param name="parameters">构造函数参数</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.Emit.Helper.GetNullValue(System.Type)">
            <summary>
            取指定类型的默认初始值
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.Emit.Helper.EmitInt(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            将整形数值推送到计算堆栈上。
            </summary>
            <param name="g">(MSIL)指令</param>
            <param name="value">整形数值</param>
        </member>
        <member name="T:Inte.XFramework.Reflection.Emit.MemberAccess_Method">
            <summary>
            方法成员访问器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Reflection.Emit.MemberAccess_Method.#ctor(System.Reflection.MethodInfo)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Reflection.Emit.MemberAccess_Method"/> 类的新实例
            </summary>
            <param name="mi">方法元数据</param>
        </member>
        <member name="M:Inte.XFramework.Reflection.Emit.MemberAccess_Method.Invoke(System.Object,System.Object[])">
            <summary>
            动态调用方法
            </summary>
            <param name="target">拥有该成员的类实例</param>
            <param name="parameters">方法参数</param>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.Reflection.MemberAccess">
            <summary>
            类成员访问器
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.MemberAccess.Member">
            <summary>
            成员实例
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.MemberAccess.FullName">
            <summary>
            成员完全限定名
            </summary>
        </member>
        <member name="M:Inte.XFramework.Reflection.MemberAccess.#ctor(System.Reflection.MemberInfo)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Reflection.MemberAccess"/> 类的新实例
            </summary>
            <param name="member">成员元数据</param>
        </member>
        <member name="M:Inte.XFramework.Reflection.MemberAccess.Get(System.Object)">
            <summary>
            Get 属性/字段 值
            </summary>
            <param name="target">拥有该成员的类实例</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.MemberAccess.Set(System.Object,System.Object)">
            <summary>
            Set 属性/字段 值
            </summary>
            <param name="target">拥有该成员的类实例</param>
            <param name="value">字段/属性值</param>
        </member>
        <member name="M:Inte.XFramework.Reflection.MemberAccess.Invoke(System.Object,System.Object[])">
            <summary>
            动态调用方法
            </summary>
            <param name="target">拥有该成员的类实例</param>
            <param name="parameters">方法参数</param>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.Reflection.MemberAccessWrapper">
            <summary>
            类成员访问包装器 Facade
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.MemberAccessWrapper.Member">
            <summary>
            成员元数据
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.MemberAccessWrapper.FieldInfo">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.MemberAccessWrapper.PropertyInfo">
            <summary>
            属性
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.MemberAccessWrapper.MethodInfo">
            <summary>
            方法
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.MemberAccessWrapper.DataType">
            <summary>
            成员元数据类型
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.MemberAccessWrapper.SetMethod">
            <summary>
            Set 访问器
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.MemberAccessWrapper.FullName">
            <summary>
            成员完全限定名
            </summary>
        </member>
        <member name="M:Inte.XFramework.Reflection.MemberAccessWrapper.#ctor(System.Reflection.MemberInfo)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Reflection.MemberAccessWrapper"/> 类的新实例
            </summary>
            <param name="member">成员元数据</param>
        </member>
        <member name="M:Inte.XFramework.Reflection.MemberAccessWrapper.Get(System.Object)">
            <summary>
            Get 属性/字段 值
            </summary>
            <param name="target">拥有该成员的类实例</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.MemberAccessWrapper.Set(System.Object,System.Object)">
            <summary>
            Set 属性/字段 值
            </summary>
            <param name="target">拥有该成员的类实例</param>
            <param name="value">字段/属性值</param>
        </member>
        <member name="M:Inte.XFramework.Reflection.MemberAccessWrapper.Invoke(System.Object,System.Object[])">
            <summary>
            动态调用方法
            </summary>
            <param name="target">拥有该成员的类实例</param>
            <param name="parameters">方法参数</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.MemberAccessWrapper.GetCustomAttribute``1">
            <summary>
            获取指定的自定义特性。
            </summary>
            <typeparam name="TAttribute">自定义特性</typeparam>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.MemberAccessWrapper.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
        </member>
        <member name="T:Inte.XFramework.Reflection.TypeRuntimeInfo">
            <summary>
            类型运行时元数据
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.TypeRuntimeInfo.Type">
            <summary>
            类型声明
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.TypeRuntimeInfo.GenericArguments">
            <summary>
            泛型参数列表
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.TypeRuntimeInfo.IsAnonymousType">
            <summary>
            是否为匿名类
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.TypeRuntimeInfo.IsGenericType">
            <summary>
             获取一个值，该值指示当前类型是否是泛型类型。
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.TypeRuntimeInfo.Wrappers">
            <summary>
            成员包装器集合
            </summary>
        </member>
        <member name="P:Inte.XFramework.Reflection.TypeRuntimeInfo.ConstructInvoker">
            <summary>
            构造函数调用器
            </summary>
        </member>
        <member name="M:Inte.XFramework.Reflection.TypeRuntimeInfo.#ctor(System.Type)">
            <summary>
            初始化 <see cref="T:Inte.XFramework.Reflection.TypeRuntimeInfo"/> 类的新实例
            </summary>
            <param name="type">类型声明</param>
        </member>
        <member name="M:Inte.XFramework.Reflection.TypeRuntimeInfo.GetWrapper(System.String)">
            <summary>
            取指定的成员包装器
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.TypeRuntimeInfo.GetWrapperAttribute``1(System.String)">
            <summary>
            取指定的成员包装器自定义特性。
            </summary>
            <typeparam name="TAttribute">自定义特性</typeparam>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.TypeRuntimeInfo.Get(System.Object,System.String)">
            <summary>
            取指定成员的值
            </summary>
            <param name="target">拥有该成员的类实例</param>
            <param name="memberName">成员名称</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.TypeRuntimeInfo.Set(System.Object,System.String,System.Object)">
            <summary>
            设置指定成员的值
            </summary>
            <param name="target">拥有该成员的类实例</param>
            <param name="memberName">成员名称</param>
            <param name="value">成员值</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.TypeRuntimeInfo.GetCustomAttribute``1">
            <summary>
            获取指定的自定义特性。
            </summary>
            <typeparam name="TAttribute">自定义特性</typeparam>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.TypeRuntimeInfo.InitializeWrapper(System.Type)">
            <summary>
            初始化成员包装器集合
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.TypeRuntimeInfo.GetConstructor">
            <summary>
            获取构造函数
            优先顺序与参数数量成反比
            </summary>
            <returns></returns>
        </member>
        <member name="T:Inte.XFramework.Reflection.TypeRuntimeInfoCache">
            <summary>
            类型运行时元数据缓存
            </summary>
        </member>
        <member name="M:Inte.XFramework.Reflection.TypeRuntimeInfoCache.GetRuntimeInfo(System.Type)">
            <summary>
            取指定类型的运行时元数据
            </summary>
            <param name="type">类型实例</param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.TypeRuntimeInfoCache.GetRuntimeInfo``1">
            <summary>
            取指定类型的运行时元数据
            </summary>
            <typeparam name="T">T</typeparam>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.TypeRuntimeInfoCache.Clear">
            <summary>
            清空所有运行时缓存项目
            </summary>
        </member>
        <member name="T:Inte.XFramework.Reflection.TypeUtils">
            <summary>
            运行时类型工具类
            </summary>
        </member>
        <member name="M:Inte.XFramework.Reflection.TypeUtils.IsPrimitive(System.Type)">
            <summary>
            判断给定类型是否是ORM支持的基元类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Inte.XFramework.Reflection.TypeUtils.ConvertClrTypeToDbType(System.Type)">
            <summary>
            CRL类型 转 DbType
            </summary>
        </member>
        <member name="T:SecurityHelper.FileHelper">
            <summary>
            文件操作类
            </summary>
        </member>
        <member name="M:SecurityHelper.FileHelper.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>bool 是否删除成功</returns>
        </member>
        <member name="M:SecurityHelper.FileHelper.GetFileName(System.String)">
            <summary>
            根据传来的文件全路径，获取文件名称部分默认包括扩展名
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>string 文件名称</returns>
        </member>
        <member name="M:SecurityHelper.FileHelper.GetFileName(System.String,System.Boolean)">
            <summary>
            根据传来的文件全路径，获取文件名称部分
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <param name="includeExtension">是否包括文件扩展名</param>
            <returns>string 文件名称</returns>
        </member>
        <member name="M:SecurityHelper.FileHelper.GetNewFileFullName(System.String)">
            <summary>
            根据传来的文件全路径，获取新的文件名称全路径,一般用作临时保存用
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>string 新的文件全路径名称</returns>
        </member>
        <member name="M:SecurityHelper.FileHelper.GetFileExtension(System.String)">
            <summary>
            根据传来的文件全路径，获取文件扩展名不包括“.”，如“doc”
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>string 文件扩展名</returns>
        </member>
        <member name="M:SecurityHelper.FileHelper.OpenFile(System.String)">
            <summary>
            根据传来的文件全路径，外部打开文件，默认用系统注册类型关联软件打开
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>bool 文件名称</returns>
        </member>
        <member name="M:SecurityHelper.FileHelper.GetFileSize(System.String)">
            <summary>
            根据传来的文件全路径，得到文件大小，规范文件大小称呼，如1ＧＢ以上，单位用ＧＢ，１ＭＢ以上，单位用ＭＢ，１ＭＢ以下，单位用ＫＢ
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>bool 文件大小</returns>
        </member>
        <member name="M:SecurityHelper.FileHelper.FileToStreamByte(System.String)">
            <summary>
            文件转换成二进制，返回二进制数组Byte[]
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>byte[] 包含文件流的二进制数组</returns>
        </member>
        <member name="M:SecurityHelper.FileHelper.ByteStreamToFile(System.String,System.Byte[])">
            <summary>
            二进制数组Byte[]生成文件
            </summary>
            <param name="createFileFullPath">要生成的文件全路径</param>
            <param name="streamByte">要生成文件的二进制 Byte 数组</param>
            <returns>bool 是否生成成功</returns>
        </member>
        <member name="M:SecurityHelper.FileHelper.ByteStreamToFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            二进制数组Byte[]生成文件，并验证文件是否存在，存在则先删除
            </summary>
            <param name="createFileFullPath">要生成的文件全路径</param>
            <param name="streamByte">要生成文件的二进制 Byte 数组</param>
            <param name="fileExistsDelete">同路径文件存在是否先删除</param>
            <returns>bool 是否生成成功</returns>
        </member>
        <member name="M:SecurityHelper.FileHelper.ReadAndWriteFile(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            读写文件，并进行匹配文字替换
            </summary>
            <param name="pathRead">读取路径</param>
            <param name="pathWrite">写入路径</param>
            <param name="replaceStrings">替换字典</param>
        </member>
        <member name="M:SecurityHelper.FileHelper.ReadFile(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="filePath">文件路径</param>
            <returns>返回值</returns>
        </member>
        <member name="M:SecurityHelper.FileHelper.WriteFile(System.String,System.String)">
            <summary>
            写入文件
            </summary>
            <param name="pathWrite">写入路径</param>
            <param name="content">内容</param>
        </member>
        <member name="M:SecurityHelper.FileHelper.ReadAndAppendFile(System.String,System.String)">
            <summary>
            读取并附加文本
            </summary>
            <param name="filePath">文件路径</param>
            <param name="content">内容</param>
        </member>
        <member name="M:SecurityHelper.FileHelper.CopyFile(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="sources">源文件</param>
            <param name="dest">目标文件</param>
        </member>
        <member name="M:SecurityHelper.FileHelper.MoveFile(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="sources">源文件</param>
            <param name="dest">目标文件</param>
        </member>
        <member name="M:SecurityHelper.FileHelper.IsExistFile(System.String)">
            <summary>
            检测指定文件是否存在,如果存在则返回true。
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <returns>bool 是否存在文件</returns>
        </member>
    </members>
</doc>
